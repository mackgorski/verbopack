//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String             @id() @default(cuid())
  clerkId             String             @unique()
  email               String             @unique()
  firstName           String?
  lastName            String?
  imageUrl            String?
  primaryEmailId      String?
  primaryPhoneId      String?
  primaryWeb3WalletId String?
  lastSignInAt        DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt()
  userOrganizations   UserOrganization[]
  externalId          String?
  username            String?
  publicMetadata      String?
  privateMetadata     String?
  unsafeMetadata      String?
  sessions            Session[]

  @@index([clerkId])
}

model Organization {
  id                String             @id() @default(cuid())
  clerkId           String             @unique()
  name              String
  slug              String             @unique()
  imageUrl          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt()
  userOrganizations UserOrganization[]
  publicMetadata    String?
  privateMetadata   String?

  @@index([clerkId])
}

model UserOrganization {
  id             String       @id() @default(cuid())
  userId         String
  organizationId String
  role           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt()
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model Session {
  id        String    @id() @default(cuid())
  clerkId   String    @unique()
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  startedAt DateTime  @default(now())
  endedAt   DateTime?

  @@index([userId])
  @@index([clerkId])
}
